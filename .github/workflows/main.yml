
name: "Build ffmpeg"

on:
  push:
    tags:
    - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name: [
          #raspbian-armv6l,
          #debian-x86_64,
          #debian-armv7l,
          #debian-aarch64,
          #alpine-x86_64,
          #alpine-armv6l,
          #alpine-aarch64,
          darwin-x86_64
        ]
        include:
          - name: raspbian-armv6l
            os: ubuntu-latest
            BASE_IMAGE: balenalib/raspberry-pi-debian:stretch
            DOCKERFILE: Dockerfile.debian
            TARGET_OS: raspbian
          - name: debian-x86_64
            os: ubuntu-latest
            BASE_IMAGE: library/debian:stretch
            DOCKERFILE: Dockerfile.debian
            TARGET_OS: debian
          - name: debian-armv7l
            os: ubuntu-latest
            BASE_IMAGE: arm32v7/debian:stretch
            DOCKERFILE: Dockerfile.debian
            TARGET_OS: debian
          - name: debian-aarch64
            os: ubuntu-latest
            BASE_IMAGE: arm64v8/debian:stretch
            DOCKERFILE: Dockerfile.debian
            TARGET_OS: debian
          - name: alpine-x86_64
            os: ubuntu-latest
            BASE_IMAGE: library/alpine:3.11.3
            DOCKERFILE: Dockerfile.alpine
            TARGET_OS: alpine
          - name: alpine-armv6l
            os: ubuntu-latest
            BASE_IMAGE: arm32v6/alpine:3.11.3
            DOCKERFILE: Dockerfile.alpine
            TARGET_OS: alpine
          - name: alpine-aarch64
            os: ubuntu-latest
            BASE_IMAGE: arm64v8/alpine:3.11.3
            DOCKERFILE: Dockerfile.alpine
            TARGET_OS: alpine
          - name: darwin-x86_64
            os: macOS-latest

    steps:
    - uses: actions/checkout@v3
    - name: Cache Workspace
      id: cache
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ matrix.name }}-cache

    # Linux Builds
    - name: Linux - Setup Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static:register --reset
    - name: Linux - Build Docker Image 
      if: runner.os == 'Linux'
      run: |
        docker build --build-arg BASE_IMAGE=${{ matrix.BASE_IMAGE }} -f ${{ matrix.DOCKERFILE }} -t ffmpeg-builder .
    - name: Linux - Build static ffmpeg binary
      if: runner.os == 'Linux'
      run: |
        mkdir -p build
        docker run -v $(pwd)/build:/build -e TARGET_OS=${{ matrix.TARGET_OS }} ffmpeg-builder
    - name: Linux - Fix permissions
      if: runner.os == 'Linux'
      run: |
        sudo chown -R $USER:$USER build

    # macOS Build
    - name: macOS - Build static ffmpeg binary
      if: runner.os == 'macOS'
      run: |
        mkdir -p build
        cd build && SKIPINSTALL=yes VERBOSE=yes ../build-ffmpeg --build

    - name: Prepare Asset
      run: |
        mkdir -p package/usr/local/bin/
        cp build/workspace/bin/ffmpeg package/usr/local/bin/ffmpeg
        tar -C package -zcvf ffmpeg-${{ matrix.name }}.tar.gz .

    - name: Upload Asset
      uses: actions/upload-artifact@v3
      with:
        name: ffmpeg-${{ matrix.name }}
        path: ffmpeg-${{ matrix.name }}.tar.gz

  publish:
    needs: build

    uses: homebridge/.github/.github/workflows/npm-publish.yml@main
    secrets:
      npm_auth_token: ${{ secrets.npm_token }}
