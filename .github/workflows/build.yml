# build.yml: Build FFmpeg binaries.
#
name: 'Build FFmpeg binaries.'

on:
  workflow_dispatch:

jobs:
  build:
    name: 'Build FFmpeg'
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        name: [
          alpine-aarch64,
          alpine-arm32v7,
          alpine-x86_64,
          #darwin-arm64,
          darwin-x86_64,
          windows-x86_64
        ]

        include:
          - name: alpine-aarch64 # Build for arm v8 64-bit Linux environments.
            os: ubuntu-latest
            BASE_IMAGE: arm64v8/alpine:latest
            DOCKERFILE: linux
            EMULATE_ARCH: aarch64
            TARGET_ARCH: aarch64
            TARGET_OS: alpine

          - name: alpine-arm32v7 # Build for arm v7 32-bit Linux environments.
            os: ubuntu-latest
            BASE_IMAGE: arm32v7/alpine:latest
            DOCKERFILE: linux
            EMULATE_ARCH: arm
            TARGET_ARCH: arm32v7
            TARGET_OS: alpine

          - name: alpine-x86_64 # Build for Intel 64-bit Linux environments.
            os: ubuntu-latest
            BASE_IMAGE: library/alpine:latest
            DOCKERFILE: linux
            # This is intentional.
            EMULATE_ARCH: aarch64
            TARGET_ARCH: x86_64
            TARGET_OS: alpine

          #- name: darwin-arm64 # Build for Apple Silicon macOS environments.
          #  os: macos-14

          - name: darwin-x86_64 # Build for Intel macOS environments.
            os: macos-14-large

          - name: windows-x86_64 # Build for Intel 64-bit Windows environments.
            os: ubuntu-latest
            BASE_IMAGE: library/ubuntu:latest
            DOCKERFILE: windows

    steps:
    - uses: actions/checkout@v3
    - name: 'Caching workspace.'
      id: cache
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ matrix.name }}-cache

    # Docker image build.
    - name: 'Docker: creating the build image.'
      if: runner.os == 'Linux'
      # Configure QEMU to register handlers for our target architectures and build the image that will become our build environment.
      run: |
        docker run --rm --privileged multiarch/qemu-user-static:register --reset 
        docker build --build-arg BASE_IMAGE=${{ matrix.BASE_IMAGE }} --build-arg EMULATE_ARCH=${{ matrix.EMULATE_ARCH }} -f Dockerfile.${{ matrix.DOCKERFILE }} -t ffmpeg-builder-${{ matrix.name }} .

    - name: 'Docker: building the FFmpeg binary.' # Docker image build.
      if: runner.os == 'Linux'
      # Start the build environment for our requested target and fix any permissions issues that may have arisen due to containerization.
      run: |
        mkdir -p build
        docker run -v $(pwd)/build:/build -e TARGET_OS=${{ matrix.TARGET_OS }} -e TARGET_BUILD_ARCH=${{ matrix.TARGET_ARCH }} ffmpeg-builder-${{ matrix.name }}
        sudo chown -R $USER:$USER build

    - name: 'macOS: building the FFmpeg binary.' # macOS Builds.
      if: runner.os == 'macOS'
      # Execute the build script.
      run: |
        mkdir -p build
        cd build && SKIPINSTALL=yes VERBOSE=yes ../build-ffmpeg --build --enable-gpl-and-non-free

    - name: 'Linux and macOS: packaging the binary.' # Package our binaries for non-Windows operating systems.
      if: matrix.DOCKERFILE != 'windows'
       # Emulate the filesystem hierarchy so it's easily discoverable in a user's path environment variable and now we package it all up.
      run: |
        mkdir -p package/usr/local/bin/
        cp build/workspace/bin/ffmpeg package/usr/local/bin/ffmpeg
        tar -C package -zcvf ffmpeg-${{ matrix.name }}.tar.gz .

    - name: 'Windows: packaging the binary.'
      if: matrix.DOCKERFILE == 'windows'
       # Package our binaries for Windows and Copy the binary we're looking for and we are done.
      run: |
        cp build/ffmpeg.exe .

    - name: 'Uploading the packaged asset.' # Upload the packaged asset as an artifact.
      uses: actions/upload-artifact@v3
      with:

        name: ffmpeg-${{ matrix.name }}
        path: |

          ffmpeg-${{ matrix.name }}.tar.gz
          ffmpeg.exe

