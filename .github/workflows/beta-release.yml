# ci.yml: Continuous integration workflow.
#
name: 'Node-CI Beta Build and Release to NPM'

on:
  push:
    branches: [beta-*.*.*]

jobs:
  prerelease:
    name: Create Pre-Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.last-pre-release-tag.outputs.new_pre_release_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all commits and tags
      
      - name: Get last pre-release tag or create new one
        id: last-pre-release-tag
        run: |
            # Fetch all tags
            git fetch --tags
  
            # Fetch only the tags that match the pre-release format
            pre_release_tags=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*-beta.*' --sort=-v:refname)
  
            # Get the last pre-release tag
            last_pre_release_tag=$(echo "$pre_release_tags" | head -n 1)
  
            if [ -z "$last_pre_release_tag" ]; then
              # If no pre-release tags found, get the last release tag
              last_release_tag=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n 1)
              IFS='.' read -r major minor patch <<< "$last_release_tag"
              new_pre_release_tag="$major.$minor.$patch-beta.1"
              echo "No pre-release tags found. Creating a new one: $new_pre_release_tag"
            else
              echo "Last pre-release tag: $last_pre_release_tag"
              IFS='.' read -r major minor patch beta_number <<< "$last_pre_release_tag"
              incremented_beta_number=$((beta_number + 1))
              new_pre_release_tag="$major.$minor.$patch.$incremented_beta_number"
            fi
  
            echo "::set-output name=new_pre_release_tag::$new_pre_release_tag"
  
      - name: Set environment variable
        run: echo "NEW_PRE_RELEASE_TAG=${{ steps.last-pre-release-tag.outputs.new_pre_release_tag }}" >> $GITHUB_ENV
  
      - name: Display new pre-release tag
        run: echo "New pre-release tag is $NEW_PRE_RELEASE_TAG"

      - name: Create nightly release
        id: create_release
        uses: viperproject/create-nightly-release@v1
        env:
          # This token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: '${{ steps.last-pre-release-tag.outputs.new_pre_release_tag }}'
          release_name: '${{ steps.last-pre-release-tag.outputs.new_pre_release_tag }}'
          body: |
            ${{ steps.last-pre-release-tag.outputs.new_pre_release_tag }}
          keep_num: 5
          keep_tags: false

  build:
    name: 'Build FFmpeg'
    needs: [prerelease]
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        name: [
          alpine-aarch64,
          alpine-arm32v7,
          alpine-x86_64,
          darwin-arm64,
          darwin-x86_64,
          windows-x86_64
        ]
        include:
          - name: alpine-aarch64 # Build for arm v8 64-bit Linux environments.
            os: ubuntu-latest
            BASE_IMAGE: arm64v8/alpine:latest
            DOCKERFILE: linux
            EMULATE_ARCH: aarch64
            TARGET_ARCH: aarch64
            TARGET_OS: alpine
          - name: alpine-arm32v7 # Build for arm v7 32-bit Linux environments.
            os: ubuntu-latest
            BASE_IMAGE: arm32v7/alpine:latest
            DOCKERFILE: linux
            EMULATE_ARCH: arm
            TARGET_ARCH: arm32v7
            TARGET_OS: alpine
          - name: alpine-x86_64 # Build for Intel 64-bit Linux environments.
            os: ubuntu-latest
            BASE_IMAGE: library/alpine:latest
            DOCKERFILE: linux
            EMULATE_ARCH: aarch64 # This is intentional.
            TARGET_ARCH: x86_64
            TARGET_OS: alpine
          - name: darwin-arm64  # Build for Apple Silicon macOS environments.
            os: macos-latest
          - name: darwin-x86_64 # Build for Intel macOS environments.
            os: macos-latest-large
          - name: windows-x86_64 # Build for Intel 64-bit Windows environments.
            os: ubuntu-latest
            BASE_IMAGE: library/ubuntu:latest
            DOCKERFILE: windows

    steps:
    - uses: actions/checkout@v3
    - name: 'Caching workspace.'
      id: cache
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ matrix.name }}-cache

    # Docker image build.
    - name: 'Docker: creating the build image.'
      if: runner.os == 'Linux'
        # Configure QEMU to register handlers for our target architectures and build the image that will become our build environment.
      run: |
        docker run --rm --privileged multiarch/qemu-user-static:register --reset
        docker build --build-arg BASE_IMAGE=${{ matrix.BASE_IMAGE }} --build-arg EMULATE_ARCH=${{ matrix.EMULATE_ARCH }} -f Dockerfile.${{ matrix.DOCKERFILE }} -t ffmpeg-builder-${{ matrix.name }} .

    # Docker image build.
    - name: 'Docker: building the FFmpeg binary.'
      if: runner.os == 'Linux'
      # Start the build environment for our requested target and fix any permissions issues that may have arisen due to containerization.
      run: |
        mkdir -p build
        docker run -v $(pwd)/build:/build -e TARGET_OS=${{ matrix.TARGET_OS }} -e TARGET_BUILD_ARCH=${{ matrix.TARGET_ARCH }} ffmpeg-builder-${{ matrix.name }}
        sudo chown -R $USER:$USER build

    # macOS Builds.
    - name: 'macOS: building the FFmpeg binary.'
      if: runner.os == 'macOS'
      # Execute the build script.
      run: |
        mkdir -p build
        cd build && SKIPINSTALL=yes VERBOSE=yes ../build-ffmpeg --build --enable-gpl-and-non-free

    # Package our binaries for non-Windows operating systems.
    - name: 'Linux and macOS: packaging the binary.'
      if: matrix.DOCKERFILE != 'windows'
      # Emulate the filesystem hierarchy so it's easily discoverable in a user's path environment variable and now we package it all up.
      run: |
        mkdir -p package/usr/local/bin/
        cp build/workspace/bin/ffmpeg package/usr/local/bin/ffmpeg
        tar -C package -zcvf ffmpeg-${{ matrix.name }}.tar.gz .

    # Package our binaries for Windows.
    - name: 'Windows: packaging the binary.'
      if: matrix.DOCKERFILE == 'windows'
      # Copy the binary we're looking for and we are done.
      run: |
        cp build/ffmpeg.exe .

    # Upload the packaged asset as an artifact.
    - name: 'Uploading the packaged asset.'
      uses: actions/upload-artifact@v3
      with:
        name: ffmpeg-${{ matrix.name }}
        path: |
          ffmpeg-${{ matrix.name }}.tar.gz
          ffmpeg.exe
    
    - name: Attach Bundle
      uses: AButler/upload-release-assets@v3.0
      with:
        files: 'ffmpeg-${{ matrix.name }}.tar.gz;ffmpeg.exe'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        release-tag: v${{ needs.adjust_version.outputs.version }}

  build_package:
    name: 'Build package'
    needs: [prerelease,build]
    strategy:
      matrix:
        node-version: [ lts/-1, lts/* ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout the repository.
        uses: actions/checkout@v3

      - name: Setup the node ${{ matrix.node-version }} environment.
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build and install the package with a clean slate.
        run: |
          npm ci
          npm run build --if-present
        env:
          CI: true

  publish:
    needs: [prerelease,build,build_package]
    name: Publish ${{ needs.adjust_version.outputs.version }}
    if: ${{ github.repository == 'homebridge/ffmpeg-for-homebridge' }}
    uses: homebridge/.github/.github/workflows/npm-publish.yml@latest
    with:
      tag: 'beta'
      dynamically_adjust_version: true
      npm_version_command: 'pre'
      pre_id: 'beta'
      install_cmd: npm ci && cd ui && npm ci
    secrets:
      npm_auth_token: ${{ secrets.npm_token }}
    
  github-prerelease-to-discord:
    name: Discord Webhooks
    if: ${{ github.repository == 'homebridge/ffmpeg-for-homebridge' }}
    needs: [prerelease,build,build_package,publish]
    uses: homebridge/.github/.github/workflows/discord-webhooks.yml@latest
    with:
      title: "FFmpeg for Homebridge"
      description: |
        Version `v${{ needs.publish.outputs.NPM_VERSION }}`
      url: "https://github.com/homebridge/homebridge-config-ui-x/releases/tag/v${{ needs.publish.outputs.NPM_VERSION }}"
    secrets:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL_BETA }}