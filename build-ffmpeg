#!/bin/bash
#
# This is a (sometimes significantly) modified version of the excellent build script from https://github.com/markus-perl/ffmpeg-build-script designed for our needs in the Homebridge project.
#
# HOMEPAGE: https://github.com/markus-perl/ffmpeg-build-script
# LICENSE: https://github.com/markus-perl/ffmpeg-build-script/blob/master/LICENSE
#
PROGNAME=$(basename "$0")
FFMPEG_VERSION="7.0.2"
SCRIPT_VERSION="1.46-homebridge.2.1.5"
CWD=$(pwd)
PACKAGES="${CWD}/packages"
WORKSPACE="${CWD}/workspace"
CFLAGS="-I${WORKSPACE}/include"
LDFLAGS="-L${WORKSPACE}/lib"
LDEXEFLAGS=""
EXTRALIBS="-ldl -lpthread -lm -lz"
CONFIGURE_OPTIONS=()
NONFREE_AND_GPL=false
LATEST=false
MANPAGES=1
CURRENT_PACKAGE_VERSION=0
AUTOINSTALL="no"
SKIPINSTALL="yes"

# Are we targetting Apple Silicon?
isAppleSilicon() {

  if [[ "${TARGET_ARCH}" == "arm64" && "${TARGET_OS}" == "darwin" ]]; then

    return 0
  fi

  return 1
}

# Are we targetting Linux?
isLinux() {

  if [[ "${TARGET_OS}" == "alpine" || "${TARGET_OS}" == "debian" || "${TARGET_OS}" == "raspbian" || "${OSTYPE}" == "linux-gnu" ]]; then

    return 0
  fi

  return 1
}

if [[ "${OSTYPE}" == "darwin"* ]]; then

  # We skip the rav1e encoder build on macOS.
  SKIPRAV1E="yes"
  TARGET_OS="darwin"
elif [ -z "${TARGET_OS}" ]; then

  TARGET_OS=$(uname -s)
fi

if [ -z "${TARGET_ARCH}" ]; then

  TARGET_ARCH=$(uname -m)
fi

# Check for Apple Silicon
if isAppleSilicon; then

  # If arm64 AND darwin (macOS)
  export ARCH=arm64
  export MACOSX_DEPLOYMENT_TARGET=11.0
fi

# Speed up the process
# Env Var NUMJOBS overrides automatic detection
if [[ -n "${NUMJOBS}" ]]; then

  MJOBS="${NUMJOBS}"
elif command -v nproc &> /dev/null; then

  MJOBS=$(nproc)
elif [[ -f /proc/cpuinfo ]]; then

  MJOBS=$(grep -c processor /proc/cpuinfo)
elif [[ "${TARGET_OS}" == "darwin" ]]; then

  MJOBS=$(sysctl -n machdep.cpu.thread_count)
  CONFIGURE_OPTIONS+=("--enable-videotoolbox")
  MACOS_LIBTOOL="$(which libtool)" # gnu libtool is installed in this script and need to avoid name conflict
else

  MJOBS=4
fi

make_dir() {

  remove_dir "$1"
  if ! mkdir "$1"; then
    printf "\n Failed to create dir %s" "$1"
    exit 1
  fi
}

remove_dir() {

  if [ -d "$1" ]; then
    rm -r "$1"
  fi
}

clone() {

  # clone url [dirname]

  CLONE_PATH="${PACKAGES}"
  CLONE_NAME="${2:-"${1##*/}"}"
  TARGETDIR="${3:-"${CLONE_NAME%.*}"}"

  if [ ! -d "${CLONE_PATH}/${TARGETDIR}" ]; then

    echo "Cloning from $1 as ${TARGETDIR}"
    git clone -q "$1" "${CLONE_PATH}/${TARGETDIR}"

    EXITCODE=$?
    if [ ${EXITCODE} -ne 0 ]; then

      echo ""
      echo "Failed to download $1. Exitcode ${EXITCODE}. Retrying in 10 seconds"
      sleep 10
      git clone -q "$1" "${CLONE_PATH}/${TARGETDIR}"
    fi

    EXITCODE=$?
    if [ ${EXITCODE} -ne 0 ]; then

      echo ""
      echo "Failed to download $1. Exitcode ${EXITCODE}"
      exit 1
    fi

    echo "... Done"
  else

    echo "${CLONE_NAME} has already downloaded."
  fi

  cd "${CLONE_PATH}/${TARGETDIR}" || (echo "Error has occurred." ; exit 1)
}

download() {

  # download url [filename[dirname]]

  DOWNLOAD_PATH="${PACKAGES}"
  DOWNLOAD_FILE="${2:-"${1##*/}"}"

  if [[ "${DOWNLOAD_FILE}" =~ tar. ]]; then

    TARGETDIR="${DOWNLOAD_FILE%.*}"
    TARGETDIR="${3:-"${TARGETDIR%.*}"}"
  else

    TARGETDIR="${3:-"${DOWNLOAD_FILE%.*}"}"
  fi

  if [ ! -f "${DOWNLOAD_PATH}/${DOWNLOAD_FILE}" ]; then

    echo "Downloading $1 as ${DOWNLOAD_FILE}"
    curl -L --silent -o "${DOWNLOAD_PATH}/${DOWNLOAD_FILE}" "$1"

    EXITCODE=$?
    if [ ${EXITCODE} -ne 0 ]; then

      echo ""
      echo "Failed to download $1. Exitcode ${EXITCODE}. Retrying in 10 seconds"
      sleep 10
      curl -L --silent -o "${DOWNLOAD_PATH}/${DOWNLOAD_FILE}" "$1"
    fi

    EXITCODE=$?
    if [ ${EXITCODE} -ne 0 ]; then

      echo ""
      echo "Failed to download $1. Exitcode ${EXITCODE}"
      exit 1
    fi

    echo "... Done"
  else

    echo "${DOWNLOAD_FILE} has already downloaded."
  fi

  make_dir "${DOWNLOAD_PATH}/${TARGETDIR}"

  if [[ "${DOWNLOAD_FILE}" == *"patch"* ]]; then

    return
  fi

  if [ -n "$3" ]; then

    if ! tar -xvf "${DOWNLOAD_PATH}/${DOWNLOAD_FILE}" -C "${DOWNLOAD_PATH}/${TARGETDIR}" 2>/dev/null >/dev/null; then

      echo "Failed to extract ${DOWNLOAD_FILE}"
      exit 1
    fi
  else

    if ! tar -xvf "${DOWNLOAD_PATH}/${DOWNLOAD_FILE}" -C "${DOWNLOAD_PATH}/${TARGETDIR}" --strip-components 1 2>/dev/null >/dev/null; then
      echo "Failed to extract ${DOWNLOAD_FILE}"
      exit 1
    fi
  fi

  echo "Extracted ${DOWNLOAD_FILE}"

  cd "${DOWNLOAD_PATH}/${TARGETDIR}" || (echo "Error has occurred."; exit 1)
}

execute() {

  echo "$ $*"

  OUTPUT=$("$@" 2>&1)

  # shellcheck disable=SC2181
  if [ $? -ne 0 ]; then
    echo "${OUTPUT}"
    echo ""
    echo "Failed to Execute $*" >&2
    exit 1
  fi
}

build() {

  echo ""
  echo "building $1 - version $2"
  echo "======================="
  CURRENT_PACKAGE_VERSION=$2

  if [ -f "${PACKAGES}/$1.done" ]; then

    if grep -Fx "$2" "${PACKAGES}/$1.done" >/dev/null; then

      echo "$1 version $2 already built. Remove ${PACKAGES}/$1.done lockfile to rebuild it."
      return 1
    elif ${LATEST}; then

      echo "$1 is outdated and will be rebuilt with latest version $2"
      return 0
    else

      echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove ${PACKAGES}/$1.done lockfile."
      return 1
    fi
  fi

  return 0
}

command_exists() {

  if ! [[ -x $(command -v "$1") ]]; then

    return 1
  fi

  return 0
}

library_exists() {

  if ! [[ -x $(pkg-config --exists --print-errors "$1" 2>&1 >/dev/null) ]]; then

    return 1
  fi

  return 0
}

build_done() {

  echo "$2" >"${PACKAGES}/$1.done"
}

verify_binary_type() {

  if ! command_exists "file"; then

    return
  fi

  BINARY_TYPE=$(file "${WORKSPACE}/bin/ffmpeg" | sed -n 's/^.*\:\ \(.*$\)/\1/p')
  echo ""
  case ${BINARY_TYPE} in

    "Mach-O 64-bit executable arm64")
      echo "Successfully built Apple Silicon (M1) for ${OSTYPE}: ${BINARY_TYPE}"
      ;;

    *)
      echo "Successfully built binary for ${OSTYPE}: ${BINARY_TYPE}"
      ;;

  esac
}

cleanup() {

  remove_dir "${PACKAGES}"
  remove_dir "${WORKSPACE}"
  echo "Cleanup done."
  echo ""
}

usage() {

  echo "Usage: ${PROGNAME} [OPTIONS]"
  echo "Options:"
  echo "  -h, --help                     Display usage information"
  echo "      --version                  Display version information"
  echo "  -b, --build                    Starts the build process"
  echo "      --enable-gpl-and-non-free  Enable GPL and non-free codecs  - https://ffmpeg.org/legal.html"
  echo "  -c, --cleanup                  Remove all working dirs"
  echo "      --latest                   Build latest version of dependencies if newer available"
  echo "      --small                    Prioritize small size over speed and usability; don't build manpages"
  echo "      --full-static              Build a full static FFmpeg binary (eg. glibc, pthreads etc...) **only Linux**"
  echo "                                 Note: Because of the NSS (Name Service Switch), glibc does not recommend static links."
  echo ""
}

echo "ffmpeg-build-script v${SCRIPT_VERSION}"
echo "========================="
echo ""
echo "Building for ${OSTYPE} (${TARGET_OS}-${TARGET_ARCH})"
echo ""

while (($# > 0)); do

  case $1 in

    -h | --help)
      usage
      exit 0
      ;;

    --version)
      echo "${SCRIPT_VERSION}"
      exit 0
      ;;

    -*)
      if [[ "$1" == "--build" || "$1" =~ '-b' ]]; then

        bflag='-b'
      fi

      if [[ "$1" == "--enable-gpl-and-non-free" ]]; then

        CONFIGURE_OPTIONS+=("--enable-nonfree" "--enable-gpl")
        NONFREE_AND_GPL=true
      fi

      if [[ "$1" == "--cleanup" || "$1" =~ '-c' && ! "$1" =~ '--' ]]; then

        cflag='-c'
        cleanup
      fi

      if [[ "$1" == "--full-static" ]]; then

        if [[ "${TARGET_OS}" == "darwin" ]]; then

          echo "Error: A full static binary can only be build on Linux."
          exit 1
        fi

        LDEXEFLAGS="-static"
      fi

      if [[ "$1" == "--latest" ]]; then

        LATEST=true
      fi

      if [[ "$1" == "--small" ]]; then

        CONFIGURE_OPTIONS+=("--enable-small" "--disable-doc")
        MANPAGES=0
      else

        CONFIGURE_OPTIONS+=("--enable-hardcoded-tables")
      fi

      shift
      ;;

    *)
      usage
      exit 1
      ;;

  esac
done

if [ -z "$bflag" ]; then

  if [ -z "$cflag" ]; then

    usage

    exit 1
  fi

  exit 0
fi

echo "Using ${MJOBS} make jobs simultaneously."

if ${NONFREE_AND_GPL}; then

  echo "With GPL and non-free codecs"
fi

if [ -n "${LDEXEFLAGS}" ]; then

  echo "Start the build in full static mode."
fi

mkdir -p "${PACKAGES}"
mkdir -p "${WORKSPACE}"

export PATH="${WORKSPACE}/bin:${PATH}"

PKG_CONFIG_PATH=""

if [[ "${TARGET_OS}" == "raspbian" ]]; then

  PKG_CONFIG_PATH+="${WORKSPACE}/opt/vc/lib/pkgconfig:"
fi

PKG_CONFIG_PATH+="${WORKSPACE}/lib/pkgconfig:/usr/local/lib/${TARGET_ARCH}-${OSTYPE}/pkgconfig:/usr/local/lib/pkgconfig"
PKG_CONFIG_PATH+=":/usr/local/share/pkgconfig:/usr/lib/${TARGET_ARCH}-${OSTYPE}/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib64/pkgconfig"
export PKG_CONFIG_PATH

echo "Package config path: ${PKG_CONFIG_PATH}"

if ! command_exists "make"; then

  echo "make not installed."

  exit 1
fi

if ! command_exists "g++"; then

  echo "g++ not installed."

  exit 1
fi

if ! command_exists "curl"; then

  echo "curl not installed."

  exit 1
fi

if ! command_exists "cargo"; then

  echo "cargo not installed. rav1e encoder will not be available."
fi

if ! command_exists "python3"; then

  echo "python3 command not found. Lv2 filter and dav1d decoder will not be available."
fi

##
## build tools
##

# Check for Raspberry Pi
if [[ "${TARGET_OS}" == "raspbian" ]]; then

  echo "Installing Raspberry Pi-specific development tools and configuring for Raspberry Pi-specific codecs."

  if build "rpi-userland" "latest"; then

    clone "https://github.com/raspberrypi/userland.git" "rpi-userland"

    # Native compile on the Raspberry Pi
    mkdir -p build/raspberry
    cd build/raspberry
    # VMCS_INSTALL_PREFIX="${WORKSPACE}"
    execute cmake -DLIBRARY_TYPE=STATIC -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DARM64=off -DCMAKE_TOOLCHAIN_FILE=../../makefiles/cmake/toolchains/arm-linux-gnueabihf.cmake ../..
    execute make -j ${MJOBS}
    execute make install DESTDIR="${WORKSPACE}"

    build_done "rpi-userland" "latest"
  fi

  CFLAGS+=" -I${WORKSPACE}/opt/vc/include/IL"
  LDFLAGS+=" -L${WORKSPACE}/opt/vc/lib"

  # CONFIGURE_OPTIONS+=("--enable-mmal" "--enable-omx-rpi")
  CONFIGURE_OPTIONS+=("--enable-omx-rpi")
fi

if ! isLinux; then

  if build "giflib" "5.2.1"; then

    download "https://downloads.sourceforge.net/project/giflib/giflib-5.2.1.tar.gz"

    if [[ "${TARGET_OS}" == "darwin" ]]; then

      download "https://sourceforge.net/p/giflib/bugs/_discuss/thread/4e811ad29b/c323/attachment/Makefile.patch"
      execute patch -p0 --forward "${PACKAGES}/giflib-5.2.1/Makefile" "${PACKAGES}/Makefile.patch" || true
    fi
    #multicore build disabled for this library
    execute make
    execute make PREFIX="${WORKSPACE}" install

    build_done "giflib" "5.2.1"
  fi


  if build "pkg-config" "0.29.2"; then

    download "https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz"

    execute ./configure CFLAGS="-g -O2 -Wno-int-conversion" --silent --prefix="${WORKSPACE}" --with-pc-path="${WORKSPACE}/lib/pkgconfig:/usr/lib/${TARGET_ARCH}-${OSTYPE}/pkgconfig" --with-internal-glib
    execute make -j ${MJOBS}
    execute make install

    build_done "pkg-config" "0.29.2"
  fi

  if build "yasm" "1.3.0"; then

    download "https://github.com/yasm/yasm/releases/download/v1.3.0/yasm-1.3.0.tar.gz"

    execute ./configure --prefix="${WORKSPACE}"
    execute make -j ${MJOBS}
    execute make install

    build_done "yasm" "1.3.0"
  fi

  if build "nasm" "2.16.01"; then

    download "https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/nasm-2.16.01.tar.xz"

    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j ${MJOBS}
    execute make install

    build_done "nasm" "2.16.01"
  fi

  if build "zlib" "1.2.13"; then

    download "https://zlib.net/fossils/zlib-1.2.13.tar.gz"

    execute ./configure --static --prefix="${WORKSPACE}"
    execute make -j ${MJOBS}
    execute make install

    build_done "zlib" "1.2.13"
  fi

  if build "m4" "1.4.19"; then

    download "https://ftp.gnu.org/gnu/m4/m4-1.4.19.tar.gz"

    execute ./configure --prefix="${WORKSPACE}"
    execute make -j ${MJOBS}
    execute make install

    build_done "m4" "1.4.19"
  fi

  if build "autoconf" "2.71"; then

    download "https://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.gz"

    execute ./configure --prefix="${WORKSPACE}"
    execute make -j ${MJOBS}
    execute make install

    build_done "autoconf" "2.71"
  fi

  if build "automake" "1.16.5"; then

    download "https://ftp.gnu.org/gnu/automake/automake-1.16.5.tar.gz"

    execute ./configure --prefix="${WORKSPACE}"
    execute make -j ${MJOBS}
    execute make install

    build_done "automake" "1.16.5"
  fi
fi

if build "libtool" "2.4.7"; then

  download "http://ftp.gnu.org/gnu/libtool/libtool-2.4.7.tar.gz"

  execute ./configure --prefix="${WORKSPACE}" --enable-static --disable-shared
  execute make -j ${MJOBS}
  execute make install

  build_done "libtool" "2.4.7"
fi

if ${NONFREE_AND_GPL}; then

  if ! isLinux; then

    if build "openssl" "1.1.1u"; then

      download "https://www.openssl.org/source/openssl-${CURRENT_PACKAGE_VERSION}.tar.gz"

      if isAppleSilicon; then

        sed -n 's/\(##### GNU Hurd\)/"darwin64-arm64-cc" => { \n    inherit_from     => [ "darwin-common", asm("aarch64_asm") ],\n    CFLAGS           => add("-Wall"),\n    cflags           => add("-arch arm64 "),\n    lib_cppflags     => add("-DL_ENDIAN"),\n    bn_ops           => "SIXTY_FOUR_BIT_LONG", \n    perlasm_scheme   => "macosx", \n}, \n\1/g' Configurations/10-main.conf
        execute ./Configure --prefix="${WORKSPACE}" no-shared no-asm darwin64-arm64-cc
      else

        execute ./config --prefix="${WORKSPACE}" --openssldir="${WORKSPACE}" --with-zlib-include="${WORKSPACE}"/include/ --with-zlib-lib="${WORKSPACE}"/lib no-shared zlib
      fi
      execute make -j ${MJOBS}
      execute make install_sw

      build_done "openssl" ${CURRENT_PACKAGE_VERSION}
    fi
  fi

  CONFIGURE_OPTIONS+=("--enable-openssl")
else

  if build "gmp" "6.2.1"; then

    download "https://ftp.gnu.org/gnu/gmp/gmp-6.2.1.tar.xz"

    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j ${MJOBS}
    execute make install

    build_done "gmp" "6.2.1"
  fi

  if build "nettle" "3.8.1"; then

    download "https://ftp.gnu.org/gnu/nettle/nettle-3.8.1.tar.gz"

    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --disable-openssl --disable-documentation --libdir="${WORKSPACE}"/lib CPPFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}"
    execute make -j ${MJOBS}
    execute make install

    build_done "nettle" "3.8.1"
  fi

  if [[ ! ${TARGET_ARCH} == 'arm64' ]]; then

    if build "gnutls" "3.7.9"; then

      download "https://www.gnupg.org/ftp/gcrypt/gnutls/v3.7/gnutls-3.7.9.tar.xz"

      execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --disable-doc --disable-tools --disable-cxx --disable-tests --disable-gtk-doc-html --disable-libdane --disable-nls --enable-local-libopts --disable-guile --with-included-libtasn1 --with-included-unistring --without-p11-kit CPPFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}"
      execute make -j ${MJOBS}
      execute make install

      build_done "gnutls" "3.7.9"
    fi

    # CONFIGURE_OPTIONS+=("--enable-gmp" "--enable-gnutls")
  fi
fi

if ! isLinux; then

  if build "cmake" "3.26.4"; then

    download "https://github.com/Kitware/CMake/releases/download/v${CURRENT_PACKAGE_VERSION}/cmake-${CURRENT_PACKAGE_VERSION}.tar.gz"

    execute ./configure --prefix="${WORKSPACE}" --parallel="${MJOBS}" -- -DCMAKE_USE_OPENSSL=OFF
    execute make -j ${MJOBS}
    execute make install

    build_done "cmake" ${CURRENT_PACKAGE_VERSION}
  fi
fi

##
## video library
##

if command_exists "python3"; then

  # dav1d needs meson and ninja along with nasm to be built
  if ! isLinux; then

    if command_exists "pip3"; then

      # meson and ninja can be installed via pip3
      execute /usr/bin/pip3 install pip setuptools --quiet --upgrade --no-cache-dir --disable-pip-version-check

      for r in meson ninja; do

        if ! command_exists ${r}; then

          execute /usr/bin/pip3 install ${r} --quiet --upgrade --no-cache-dir --disable-pip-version-check
        fi

        export PATH=${PATH}:~/Library/Python/3.9/bin
      done
    fi
  fi

  if command_exists "meson"; then

    if build "dav1d" "1.1.0"; then

      download "https://code.videolan.org/videolan/dav1d/-/archive/1.1.0/dav1d-1.1.0.tar.gz"

      make_dir build

      CFLAGSBACKUP=${CFLAGS}
      if isAppleSilicon; then

        export CFLAGS="-arch arm64"
      fi

      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install

      if isAppleSilicon; then

        export CFLAGS=${CFLAGSBACKUP}
      fi

      build_done "dav1d" "1.1.0"
    fi

    CONFIGURE_OPTIONS+=("--enable-libdav1d")
  fi
fi

if build "svtav1" "1.6.0"; then

  # Last known working commit which passed CI Tests from HEAD branch
  download "https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/v${CURRENT_PACKAGE_VERSION}/SVT-AV1-v${CURRENT_PACKAGE_VERSION}.tar.gz" "svtav1-${CURRENT_PACKAGE_VERSION}.tar.gz"

  cd "${PACKAGES}"/svtav1-${CURRENT_PACKAGE_VERSION}//Build/linux || exit
  execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DENABLE_SHARED=off -DBUILD_SHARED_LIBS=OFF ../.. -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
  execute make -j ${MJOBS}
  execute make install
  execute cp SvtAv1Enc.pc "${WORKSPACE}/lib/pkgconfig/"
  execute cp SvtAv1Dec.pc "${WORKSPACE}/lib/pkgconfig/"

  build_done "svtav1" ${CURRENT_PACKAGE_VERSION}
fi

CONFIGURE_OPTIONS+=("--enable-libsvtav1")

if command_exists "cargo"; then

  if [[ ! "${SKIPRAV1E}" == "yes" ]]; then

    if build "rav1e" "0.6.3"; then

      download "https://github.com/xiph/rav1e/archive/refs/tags/v0.6.3.tar.gz"

      execute cargo install --version "0.9.20+cargo-0.71" cargo-c
      execute cargo cinstall --prefix="${WORKSPACE}" --library-type=staticlib --crt-static --release

      build_done "rav1e" "0.6.3"
    fi

    CONFIGURE_OPTIONS+=("--enable-librav1e")
  fi
fi

if ${NONFREE_AND_GPL}; then

  if build "x264" "latest"; then

    clone "https://code.videolan.org/videolan/x264.git" "x264-${CURRENT_PACKAGE_VERSION}"
    execute ./configure --prefix="${WORKSPACE}" --enable-static --enable-pic

    execute make -j ${MJOBS}
    execute make install
    execute make install-lib-static

    build_done "x264" "${CURRENT_PACKAGE_VERSION}"
  fi

  CONFIGURE_OPTIONS+=("--enable-libx264")
fi

# 32-bit ARM platforms like Raspberry Pi don't build x265 cleanly.
if ${NONFREE_AND_GPL} && [[ ! "${TARGET_ARCH}" == "armv7l" ]] ; then

  if build "x265" "latest"; then

    clone "https://bitbucket.org/multicoreware/x265_git.git" "x265-${CURRENT_PACKAGE_VERSION}"

    cd build/linux || exit
    rm -rf 8bit 10bit 12bit 2>/dev/null
    mkdir -p 8bit 10bit 12bit

    cd 12bit || exit
    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DHIGH_BIT_DEPTH=ON -DENABLE_HDR10_PLUS=ON -DEXPORT_C_API=OFF -DENABLE_CLI=OFF -DMAIN12=ON
    execute make -j ${MJOBS}

    cd ../10bit || exit
    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DHIGH_BIT_DEPTH=ON -DENABLE_HDR10_PLUS=ON -DEXPORT_C_API=OFF -DENABLE_CLI=OFF
    execute make -j ${MJOBS}

    cd ../8bit || exit
    ln -sf ../10bit/libx265.a libx265_main10.a
    ln -sf ../12bit/libx265.a libx265_main12.a
    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DEXTRA_LIB="x265_main10.a;x265_main12.a;-ldl" -DEXTRA_LINK_FLAGS=-L. -DLINKED_10BIT=ON -DLINKED_12BIT=ON
    execute make -j ${MJOBS}

    mv libx265.a libx265_main.a

    if [[ "${TARGET_OS}" == "darwin" ]]; then

      execute "${MACOS_LIBTOOL}" -static -o libx265.a libx265_main.a libx265_main10.a libx265_main12.a 2>/dev/null
    else

      execute ar -M <<EOF
CREATE libx265.a
ADDLIB libx265_main.a
ADDLIB libx265_main10.a
ADDLIB libx265_main12.a
SAVE
END
EOF
    fi

    execute make install

    if [ -n "${LDEXEFLAGS}" ]; then

      sed -i.backup 's/-lgcc_s/-lgcc_eh/g' "${WORKSPACE}/lib/pkgconfig/x265.pc" # The -i.backup is intended and required on macOS: https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux
    fi

    build_done "x265" "${CURRENT_PACKAGE_VERSION}"
  fi

  CONFIGURE_OPTIONS+=("--enable-libx265")
fi

if [[ ! "${TARGET_ARCH}" == "arm"* ]]; then

  if build "libvpx" "1.13.0"; then

    download "https://github.com/webmproject/libvpx/archive/refs/tags/v1.13.0.tar.gz" "libvpx-1.13.0.tar.gz"

    if [[ "${TARGET_OS}" == "darwin" ]]; then

      echo "Applying Darwin patch"
      sed "s/,--version-script//g" build/make/Makefile > build/make/Makefile.patched
      sed "s/-Wl,--no-undefined -Wl,-soname/-Wl,-undefined,error -Wl,-install_name/g" build/make/Makefile.patched > build/make/Makefile
    fi

    execute ./configure --prefix="${WORKSPACE}" --disable-unit-tests --disable-shared --disable-examples --as=yasm --enable-vp9-highbitdepth
    execute make -j ${MJOBS}
    execute make install

    build_done "libvpx" "1.13.0"
  fi

  CONFIGURE_OPTIONS+=("--enable-libvpx")
fi

if ${NONFREE_AND_GPL}; then

  if build "xvidcore" "1.3.7"; then

    download "https://downloads.xvid.com/downloads/xvidcore-1.3.7.tar.gz"

    cd build/generic || exit
    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j ${MJOBS}
    execute make install

    if [[ -f ${WORKSPACE}/lib/libxvidcore.4.dylib ]]; then
      execute rm "${WORKSPACE}/lib/libxvidcore.4.dylib"
    fi

    if [[ -f ${WORKSPACE}/lib/libxvidcore.so ]]; then
      execute rm "${WORKSPACE}"/lib/libxvidcore.so*
    fi

    build_done "xvidcore" "1.3.7"
  fi

  CONFIGURE_OPTIONS+=("--enable-libxvid")
fi

if ${NONFREE_AND_GPL}; then

  if build "vid_stab" "1.1.0"; then

    download "https://github.com/georgmartius/vid.stab/archive/v1.1.0.tar.gz" "vid.stab-1.1.0.tar.gz"

    if isAppleSilicon; then

      curl -L --silent -o "${PACKAGES}/vid.stab-1.1.0/fix_cmake_quoting.patch" "https://raw.githubusercontent.com/Homebrew/formula-patches/5bf1a0e0cfe666ee410305cece9c9c755641bfdf/libvidstab/fix_cmake_quoting.patch"
      patch -p1 <fix_cmake_quoting.patch
    fi

    VIDSTABFLAGS=""

    if [[ ! "${TARGET_ARCH}" == "x86_64" ]]; then

      VIDSTABFLAGS="-DSSE2_FOUND=false"
    fi

    execute cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DUSE_OMP=OFF -DENABLE_SHARED=off ${VIDSTABFLAGS} .
    execute make
    execute make install

    build_done "vid_stab" "1.1.0"
  fi

  CONFIGURE_OPTIONS+=("--enable-libvidstab")
fi

if [[ ! "${TARGET_ARCH}" == "arm"* ]]; then

  if build "av1" "bcfe6fb"; then

    # libaom bcfe6fb == v3.5.0
    download "https://aomedia.googlesource.com/aom/+archive/bcfe6fbfed315f83ee8a95465c654ee8078dbff9.tar.gz" "av1.tar.gz" "av1"
    make_dir "${PACKAGES}"/aom_build
    cd "${PACKAGES}"/aom_build || exit
    if isAppleSilicon; then

      execute cmake -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCONFIG_RUNTIME_CPU_DETECT=0 "${PACKAGES}"/av1
    else

      execute cmake -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib "${PACKAGES}"/av1
    fi

    execute make -j ${MJOBS}
    execute make install

    build_done "av1" "bcfe6fb"
  fi

  CONFIGURE_OPTIONS+=("--enable-libaom")
fi
 
if build "zimg" "3.0.4"; then

  download "https://github.com/sekrit-twc/zimg/archive/refs/tags/release-3.0.4.tar.gz" "zimg-3.0.4.tar.gz" "zimg"

  cd zimg-release-3.0.4 || exit
  execute "${WORKSPACE}/bin/libtoolize" -i -f -q
  execute ./autogen.sh --prefix="${WORKSPACE}"
  execute ./configure --prefix="${WORKSPACE}" --enable-static --disable-shared
  execute make -j ${MJOBS}
  execute make install

  build_done "zimg" "3.0.4"
fi

CONFIGURE_OPTIONS+=("--enable-libzimg")

##
## audio library
##

if command_exists "python3"; then

  if command_exists "meson"; then

    if build "lv2" "1.18.10"; then

      download "https://lv2plug.in/spec/lv2-1.18.10.tar.xz" "lv2-1.18.10.tar.xz"

      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install

      build_done "lv2" "1.18.10"
    fi
    if build "waflib" "b600c92"; then

      download "https://gitlab.com/drobilla/autowaf/-/archive/b600c928b221a001faeab7bd92786d0b25714bc8/autowaf-b600c928b221a001faeab7bd92786d0b25714bc8.tar.gz" "autowaf.tar.gz"

      build_done "waflib" "b600c92"
    fi
    if build "serd" "0.30.16"; then

      download "https://gitlab.com/drobilla/serd/-/archive/v0.30.16/serd-v0.30.16.tar.gz" "serd-v0.30.16.tar.gz"

      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install

      build_done "serd" "0.30.16"
    fi

    if ! isLinux; then

      if build "pcre" "8.45"; then

        download "https://downloads.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.gz" "pcre-8.45.tar.gz"

        execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
        execute make -j ${MJOBS}
        execute make install

        build_done "pcre" "8.45"
      fi
    fi

    if build "sord" "0.16.14"; then

      download "https://gitlab.com/drobilla/sord/-/archive/v0.16.14/sord-v0.16.14.tar.gz" "sord-v0.16.14.tar.gz"

      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install

      build_done "sord" "0.16.14"
    fi

    if build "sratom" "0.6.14"; then

      download "https://gitlab.com/lv2/sratom/-/archive/v0.6.14/sratom-v0.6.14.tar.gz" "sratom-v0.6.14.tar.gz"

      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install

      build_done "sratom" "0.6.14"
    fi

    if build "lilv" "0.24.20"; then

      download "https://gitlab.com/lv2/lilv/-/archive/v0.24.20/lilv-v0.24.20.tar.gz" "lilv-v0.24.20.tar.gz"

      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install

      build_done "lilv" "0.24.20"
    fi

    CFLAGS+=" -I${WORKSPACE}/include/lilv-0"

    CONFIGURE_OPTIONS+=("--enable-lv2")
  fi
fi

if ! isLinux; then

  if build "opencore" "0.1.6"; then

    download "https://downloads.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-${CURRENT_PACKAGE_VERSION}.tar.gz"

    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j ${MJOBS}
    execute make install

    build_done "opencore" "${CURRENT_PACKAGE_VERSION}"
  fi
fi

CONFIGURE_OPTIONS+=("--enable-libopencore_amrnb" "--enable-libopencore_amrwb")

if ! isLinux; then

  if build "lame" "3.100"; then

    download "https://downloads.sourceforge.net/project/lame/lame/3.100/lame-${CURRENT_PACKAGE_VERSION}.tar.gz"

    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j ${MJOBS}
    execute make install

    build_done "lame" "${CURRENT_PACKAGE_VERSION}"
  fi
fi

CONFIGURE_OPTIONS+=("--enable-libmp3lame")

if build "opus" "1.5.2"; then

  download "https://downloads.xiph.org/releases/opus/opus-${CURRENT_PACKAGE_VERSION}.tar.gz"

  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j ${MJOBS}
  execute make install

  build_done "opus" "${CURRENT_PACKAGE_VERSION}"
fi

CONFIGURE_OPTIONS+=("--enable-libopus")

if build "speex" "1.2.1"; then

  download "https://ftp.osuosl.org/pub/xiph/releases/speex/speex-${CURRENT_PACKAGE_VERSION}.tar.gz"

  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j ${MJOBS}
  execute make install

  build_done "speex" "${CURRENT_PACKAGE_VERSION}"
fi

CONFIGURE_OPTIONS+=("--enable-libspeex")

if ! isLinux; then

  if build "libogg" "1.3.5"; then

    download "https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-${CURRENT_PACKAGE_VERSION}.tar.xz"

    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j ${MJOBS}
    execute make install

    build_done "libogg" "${CURRENT_PACKAGE_VERSION}"
  fi

  if build "libvorbis" "1.3.7"; then

    download "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-${CURRENT_PACKAGE_VERSION}.tar.gz"

    if [[ "${TARGET_OS}" == "darwin" ]]; then

      sed -i.backup 's/-force_cpusubtype_ALL //g' configure # The -i.backup is intended and required on macOS: https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux
    fi

    execute ./configure --prefix="${WORKSPACE}" --with-ogg-libraries="${WORKSPACE}"/lib --with-ogg-includes="${WORKSPACE}"/include/ --enable-static --disable-shared --disable-oggtest
    execute make -j ${MJOBS}
    execute make install

    build_done "libvorbis" "${CURRENT_PACKAGE_VERSION}"
  fi
fi

CONFIGURE_OPTIONS+=("--enable-libvorbis")

if ! isLinux; then

  if build "libtheora" "1.1.1"; then

    download "https://ftp.osuosl.org/pub/xiph/releases/theora/libtheora-${CURRENT_PACKAGE_VERSION}.tar.gz"

    sed "s/-fforce-addr//g" configure > configure.patched
    chmod +x configure.patched
    mv configure.patched configure

    if ! isAppleSilicon; then

      ##BEGIN CONFIG.GUESS PATCH -- Updating config.guess file. Which allowed me to compile on aarch64 (ARMv8) [linux kernel 4.9 Ubuntu 20.04]
      rm config.guess
      curl -L --silent -o "config.guess" "https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess"
      chmod +x config.guess
      ##END OF CONFIG.GUESS PATCH
    fi

    if [[ "${TARGET_OS}" == "alpine" ]]; then

      if [[ ! "${TARGET_ARCH}" == "x86_64" ]]; then

        THEORA_ADDITIONAL_OPTIONS="--build=aarch64-unknown-linux-gnu"
      else

        THEORA_ADDITIONAL_OPTIONS="--build=x86_64-pc-linux-gnu"
      fi
    fi

    execute ./configure --prefix="${WORKSPACE}" --with-ogg-libraries="${WORKSPACE}"/lib --with-ogg-includes="${WORKSPACE}"/include/ --with-vorbis-libraries="${WORKSPACE}"/lib --with-vorbis-includes="${WORKSPACE}"/include/ --enable-static --disable-shared --disable-oggtest --disable-vorbistest --disable-examples --disable-asm --disable-spec ${THEORA_ADDITIONAL_OPTIONS}
    execute make -j ${MJOBS}
    execute make install

    build_done "libtheora" "${CURRENT_PACKAGE_VERSION}"
  fi
fi

CONFIGURE_OPTIONS+=("--enable-libtheora")

if ${NONFREE_AND_GPL}; then

  if build "fdk_aac" "2.0.3"; then

    download "https://downloads.sourceforge.net/project/opencore-amr/fdk-aac/fdk-aac-${CURRENT_PACKAGE_VERSION}.tar.gz" "fdk-aac-${CURRENT_PACKAGE_VERSION}.tar.gz"

    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --enable-pic
    execute make -j ${MJOBS}
    execute make install

    build_done "fdk_aac" "${CURRENT_PACKAGE_VERSION}"
  fi

  CONFIGURE_OPTIONS+=("--enable-libfdk-aac")
fi

##
## image library
##

if [[ ! "${TARGET_OS}" == "debian" ]]; then

  if build "libtiff" "4.5.0"; then

    download "https://download.osgeo.org/libtiff/tiff-4.5.0.tar.xz"

    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --disable-dependency-tracking --disable-lzma --disable-webp --disable-zstd --without-x
    execute make -j ${MJOBS}
    execute make install

    build_done "libtiff" "4.5.0"
  fi
fi

if ! isLinux; then

  if build "libpng" "1.6.39"; then

    download "https://downloads.sourceforge.net/project/libpng/libpng16/1.6.39/libpng-1.6.39.tar.gz" "libpng-1.6.39.tar.gz"

    export LDFLAGS="${LDFLAGS}"
    export CPPFLAGS="${CFLAGS}"
    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j ${MJOBS}
    execute make install

    build_done "libpng" "1.6.39"
  fi
fi

## does not compile on monterey -> _PrintGifError
if [[ "${TARGET_OS}" != "darwin" ]]; then

  if build "libwebp" "1.2.2"; then

    download "https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.2.tar.gz" "libwebp-1.2.2.tar.gz"

    # libwebp can fail to compile on Ubuntu if these flags were left set to CFLAGS
    CPPFLAGS=
    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --disable-dependency-tracking --disable-gl --with-zlib-include="${WORKSPACE}"/include/ --with-zlib-lib="${WORKSPACE}"/lib
    make_dir build
    cd build || exit
    execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON ../
    execute make -j ${MJOBS}
    execute make install

    build_done "libwebp" "1.2.2"
  fi

  CONFIGURE_OPTIONS+=("--enable-libwebp")
fi

##
## other library
##

if [[ ! "${TARGET_OS}" == "debian" ]]; then

  if build "libsdl" "2.26.3"; then

    download "https://www.libsdl.org/release/SDL2-2.26.3.tar.gz"

    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j ${MJOBS}
    execute make install

    build_done "libsdl" "2.26.3"
  fi
fi

if ${NONFREE_AND_GPL}; then

  if build "srt" "1.5.1"; then

    download "https://github.com/Haivision/srt/archive/v1.5.1.tar.gz" "srt-1.5.1.tar.gz"

    export OPENSSL_ROOT_DIR="${WORKSPACE}"
    export OPENSSL_LIB_DIR="${WORKSPACE}"/lib
    export OPENSSL_INCLUDE_DIR="${WORKSPACE}"/include/

    if [[ "${TARGET_OS}" == "raspbian" ]]; then

      SRT_BUILD_FLAGS="-DATOMIC_USE_SRT_SYNC_MUTEX=ON"
    fi

    execute cmake . -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON -DENABLE_APPS=OFF -DUSE_STATIC_LIBSTDCXX=ON ${SRT_BUILD_FLAGS}
    execute make install

    if [ -n "${LDEXEFLAGS}" ]; then

      sed -i.backup 's/-lgcc_s/-lgcc_eh/g' "${WORKSPACE}"/lib/pkgconfig/srt.pc # The -i.backup is intended and required on macOS: https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux
    fi

    build_done "srt" "1.5.1"
  fi

  CONFIGURE_OPTIONS+=("--enable-libsrt")
fi

##
## HWaccel library
##

if isLinux && [[ "${TARGET_ARCH}" == "x86_64" ]]; then

#  Unfortunately, libva is broken in static builds of FFmpeg, making QSV out of reach for the time being.
#  # Intel QSV support.
#  if build "oneVPL" "v2023.3.1"; then
#
#    download "https://github.com/oneapi-src/oneVPL/archive/refs/tags/v2023.3.1.tar.gz" "oneVPL-v2023.3.1.tar.gz"
#
#    make_dir build
#    cd build || exit
#
#    execute cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_LIBDIR=lib \
#      -DBUILD_DISPATCHER=ON -DBUILD_DEV=ON -DBUILD_PREVIEW=OFF -DBUILD_TOOLS=OFF -DBUILD_TOOLS_ONEVPL_EXPERIMENTAL=OFF -DINSTALL_EXAMPLE_CODE=OFF \
#      -DBUILD_SHARED_LIBS=OFF -DBUILD_TESTS=OFF ..
#    execute cmake --build . --config Release
#    execute cmake --build . --config Release --target install
#
#    build_done "oneVPL" "v2023.3.1"
#  fi
#
#  CONFIGURE_OPTIONS+=("--enable-libvpl")
#
#  # Libva support.
#  if build "libva" "latest"; then
#
#    download "https://github.com/intel/libva/archive/refs/tags/2.20.0.tar.gz" "libva-2.20.0.tar.gz"
#    
#    execute env LIBTOOLIZE="${WORKSPACE}/bin/libtoolize" ./autogen.sh --prefix="${WORKSPACE}" --with-drivers-path="/usr/lib/x86_64-linux-gnu/dri" --enable-static --disable-shared
#    execute make -j ${MJOBS}
#    execute make install
#
#    build_done "libva" "2.20.0"
#  fi
#
#  CONFIGURE_OPTIONS+=("--enable-vaapi")

  if command_exists "nvcc"; then

    if build "nv-codec" "11.1.5.2"; then

      download "https://github.com/FFmpeg/nv-codec-headers/releases/download/n11.1.5.2/nv-codec-headers-11.1.5.2.tar.gz"

      execute make PREFIX="${WORKSPACE}"
      execute make PREFIX="${WORKSPACE}" install

      build_done "nv-codec" "11.1.5.2"
    fi

    CFLAGS+=" -I/usr/local/cuda/include"
    LDFLAGS+=" -L/usr/local/cuda/lib64"
    CONFIGURE_OPTIONS+=("--enable-cuda-nvcc" "--enable-cuvid" "--enable-nvdec" "--enable-nvenc" "--enable-cuda-llvm" "--enable-ffnvcodec")

    if [ -z "${LDEXEFLAGS}" ]; then

      CONFIGURE_OPTIONS+=("--enable-libnpp") # Only libnpp cannot be statically linked.
    fi

    # https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
    CONFIGURE_OPTIONS+=("--nvccflags=-gencode arch=compute_52,code=sm_52")
  else

    CONFIGURE_OPTIONS+=("--disable-ffnvcodec")
  fi

  # Vaapi doesn't work well with static links FFmpeg.
  if [ -z "${LDEXEFLAGS}" ]; then

    # If the libva development SDK is installed, enable vaapi.
    if library_exists "libva"; then

      if build "vaapi" "1"; then

        build_done "vaapi" "1"
      fi

      CONFIGURE_OPTIONS+=("--enable-vaapi")
    fi
  fi

  if build "amf" "1.4.30"; then

    download 'https://github.com/GPUOpen-LibrariesAndSDKs/AMF/archive/refs/tags/v1.4.30.tar.gz' 'AMF-1.4.30.tar.gz' 'AMF-1.4.30'

    execute rm -rf "${WORKSPACE}/include/AMF"
    execute mkdir -p "${WORKSPACE}/include/AMF"
    execute cp -r "${PACKAGES}"/AMF-1.4.30/AMF-1.4.30/amf/public/include/* "${WORKSPACE}/include/AMF/"

    build_done "amf" "1.4.30"
  fi

  CONFIGURE_OPTIONS+=("--enable-amf")
fi

##
## FFmpeg
##

EXTRA_VERSION="homebridge-${TARGET_OS}-${TARGET_ARCH}"

if [ -n "${LDEXEFLAGS}" ]; then

  EXTRA_VERSION+="-static"
fi

if [ -d "${CWD}/.git" ]; then

  echo -e "\nTemporarily moving .git dir to .git.bak to workaround ffmpeg build bug" #causing ffmpeg version number to be wrong
  mv "${CWD}/.git" "${CWD}/.git.bak"
  # if build fails below, .git will remain in the wrong place...
fi

build "ffmpeg" "${FFMPEG_VERSION}"

download "https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VERSION}.tar.gz" "FFmpeg-release-${FFMPEG_VERSION}.tar.gz"

# shellcheck disable=SC2086
echo ./configure "${CONFIGURE_OPTIONS[@]}" \
  --disable-debug \
  --disable-shared \
  --enable-pthreads \
  --enable-static \
  --enable-version3 \
  --extra-cflags="${CFLAGS}" \
  --extra-ldexeflags="${LDEXEFLAGS}" \
  --extra-ldflags="${LDFLAGS}" \
  --extra-libs="${EXTRALIBS}" \
  --pkgconfigdir="${WORKSPACE}/lib/pkgconfig" \
  --pkg-config-flags="--static" \
  --prefix="${WORKSPACE}" \
  --extra-version="${EXTRA_VERSION}"

./configure "${CONFIGURE_OPTIONS[@]}" \
  --disable-debug \
  --disable-shared \
  --enable-pthreads \
  --enable-static \
  --enable-version3 \
  --extra-cflags="${CFLAGS}" \
  --extra-ldexeflags="${LDEXEFLAGS}" \
  --extra-ldflags="${LDFLAGS}" \
  --extra-libs="${EXTRALIBS}" \
  --pkgconfigdir="${WORKSPACE}/lib/pkgconfig" \
  --pkg-config-flags="--static" \
  --prefix="${WORKSPACE}" \
  --extra-version="${EXTRA_VERSION}"

execute make -j ${MJOBS}
execute make install

if [ -d "${CWD}/.git.bak" ]; then

  mv "${CWD}/.git.bak" "${CWD}/.git"
fi

INSTALL_FOLDER="/usr"  # not recommended, overwrites system ffmpeg package
if [[ "${TARGET_OS}" == "darwin" ]]; then

  INSTALL_FOLDER="/usr/local"
else

  if [ -d "${HOME}/.local" ]; then  # systemd-standard user path

    INSTALL_FOLDER="${HOME}/.local"
  elif [ -d "/usr/local" ]; then

    INSTALL_FOLDER="/usr/local"
  fi
fi

verify_binary_type

echo ""
echo "Building done. The following binaries can be found here:"
echo "- ffmpeg: ${WORKSPACE}/bin/ffmpeg"
echo "- ffprobe: ${WORKSPACE}/bin/ffprobe"
echo "- ffplay: ${WORKSPACE}/bin/ffplay"
echo ""

INSTALL_NOW=0
if [[ "${AUTOINSTALL}" == "yes" ]]; then

  INSTALL_NOW=1
elif [[ ! "${SKIPINSTALL}" == "yes" ]]; then

  read -r -p "Install these binaries to your ${INSTALL_FOLDER} folder? Existing binaries will be replaced. [Y/n] " response

  case $response in

    "" | [yY][eE][sS] | [yY])
      INSTALL_NOW=1
    ;;

  esac
fi

if [ "${INSTALL_NOW}" = 1 ]; then

  if command_exists "sudo" && [[ ${INSTALL_FOLDER} == /usr* ]]; then

    SUDO=sudo
  fi

  ${SUDO} cp "${WORKSPACE}/bin/ffmpeg" "${INSTALL_FOLDER}/bin/ffmpeg"
  ${SUDO} cp "${WORKSPACE}/bin/ffprobe" "${INSTALL_FOLDER}/bin/ffprobe"
  ${SUDO} cp "${WORKSPACE}/bin/ffplay" "${INSTALL_FOLDER}/bin/ffplay"

  if [ ${MANPAGES} = 1 ]; then

    ${SUDO} mkdir -p "${INSTALL_FOLDER}/share/man/man1"
    ${SUDO} cp "${WORKSPACE}/share/man/man1"/ff* "${INSTALL_FOLDER}/share/man/man1"
    if command_exists "mandb"; then

      ${SUDO} mandb -q
    fi
  fi

  echo "Done. FFmpeg is now installed to your system."
fi

exit 0
